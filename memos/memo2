
## HTTP?
HTTPSではHTTPでのヘッダのやり取りをするより前にハンドシェイクを行い、HTTPヘッダも含めて暗号化されるようになっている

## SSL/TSL
証明書を使った認証 + 公開鍵暗号 + 共通鍵暗号

## 公開鍵暗号
秘密鍵と公開鍵のペアを使った暗号化手法
通信相手の公開鍵を使って暗号化したメッセージを送信し、受信したメッセージは秘密鍵を使って複号する

## 共通鍵暗号
双方で同じ鍵を使って暗号化し、同じ鍵で復号する

## 通信の流れ
TCPセッションが貼られる
- スリーウェイハンドシェイク
- SYN, SYN ACK, ACK
↓
SSL/TLSのハンドシェイク
- クライアントからのClient Helloメッセージ
    - SSL/TLSプロトコルのバージョン情報、対応するアルゴリズムのリスト
- サーバーからのServer Helloメッセージ
    - SSL/TSLのプロトコルバージョン情報、対応する暗号化アルゴリズムのリスト、サーバー証明書から始まる証明書チェイン情報
- クライアントによる証明書の検証
    - 証明書チェインを検証
    - アクセス先サーバーのドメイン名と証明書のドメイン名を名を比較
    - 検証項目
        - クライアント側があらかじめ持っている証明書ストアにあるルートCA証明書から証明書チェインが正しく辿れるかどうか
        - 証明書の有効期限が過ぎていないか
        - 証明書が失効していないか
- クライアントからのプリマスタシークレットの送信
    - プリマスターシークレットを生成
    - サーバ証明書に含まれる公開鍵で暗号化して送信
    - （このメッセージはこれ以降クライアント側のメッセージが暗号化されることを表すChange Cipher Specと呼ばれるメッセージも含まれる）
    - サーバーは自身の秘密鍵で復号し、プリマスターシークレットを取り出す
- クライアント/サーバー双方で鍵を生成
    - プリマスターシークレットと暗号化アルゴリズムを元にして共通鍵を生成する
    サーバーはChange Cipher Specを送信し、以降のサーバーのメッセージが暗号化されることをクライアントに通知する


SSL/TLSハンドシェイクが終了した後は、共通鍵による暗号化通信に切り替わる
(共通鍵のほうが、公開鍵よりも計算量が少なくて済むため、大量のデータが流れる部分には共通鍵を使ったほうが有利だから)

## 簡単に言うとこんな感じ？
クライアント
- サーバーにhelloする
↓
サーバー
- クライアントにhelloする
- 証明書 and 公開鍵を送る
↓
クライアント
- 証明書を検証
- 共通鍵の生成
- 公開鍵で共通鍵を生成する情報を暗号化して送信
- （今後は暗号化したメッセージ送るからよろしく）
↓
サーバー
- 秘密鍵で情報を開ける
- 受け取った情報から共通鍵を生成
- 今後の通信ではこれをつかうぜ
- （俺も今後は暗号化したメッセージ送るわ）

## TCPハンドシェイク？？
通信を開始するための通信

## 中間者攻撃(MITM: Man In The Middle)
中間地点で通信に攻撃を加える
プロキシサーバーがSSL/TLSのハンドシェイクに介入し、通信の中身をみたり改ざんしたりしようとする

## 中間者攻撃と証明書
プロキシを通してHTTPSのウェブサイトにアクセスする場合は、プロキシサーバーに対して、CONNECTメソッドを送る。
クライアントからのClient Helloを受信したプロキシサーバーはServer Helloを送らなければならない
Server Helloにはサーバ証明書が含まれている

- プロキシーサーバーが証明書を勝手に使った場合は？
サーバ証明書は暗号化前のハンドシェイクの中に含まれており、頻繁に平文で通信されるため、証明書の中身をプロキシーサーバーが知ることは容易
同じものを送信することもできる
しかし
この証明書は公開鍵に付与情報をつけてCA(Certification Agent)が署名したもので、プロキシーサーバーが知ることができない秘密鍵とペアになっている
↓
中間者攻撃で本物の証明書を使ってもプリマスターシークレットを知ることができず、通信の中身も知ることができない

- プロキシサーバーが勝手に秘密鍵と証明書を作成し、独自のServer Helloを送った場合は？
プロキシサーバーは通信の内容を複合して複合して知ることができる。
しかし、クライアントが証明書を検証することで正規のCAがアクセス先ドメインに対して署名したもの出ないことが判明する
↓
ブラウザが警告を出すことでユーザーが中間者攻撃に気づく

## CONNECTメソッド
与えられたホストとポートに対して接続するというメソッド
目的のポートに接続された後にHTTPSハンドシェイクをして通信を始める。
→プロキシサーバーはアクセス先のホスト名やIPアドレス、ポート番号わかるが、どんな情報がやり取りされているのかはわからない

## サーバ証明書の取得
サーバー証明書はCAが発行する

証明書の種類
- DV(Domain Validation)証明書
- OV(Organization Validation)証明書
- EV(Extended Validation)証明書

サーバー証明書の発行は以下のような流れ
- 秘密鍵を生成する
- CSR(Certificate Signing Request)を作成する
- CAにCSRを提出する
- CAが審査を行い、Webサーバーの設定に必要な証明書を発行する
- Webサーバーに証明書を設置する

///////////////////////
秘密鍵の作成
// ここにmakefileが置いてあった、これを使うと鍵を作れるっぽい
cd etc/pki/tls/certs/

CSRの作成
make your-server.csr

CSR内データの確認
openssl req -utf8 -in your-server.csr -text

パスフレーズの解除
sudo openssl rsa -in your-server.key -out your-server.nopass.key
chmod 400 your-server.nopass.key
///////////////////////

opensslとは？？

CAが発行する証明書はDER(Distinguished Encoding Rules)もしくはPEM(Privacy Enhanced Mail)と呼ばれる形式でエンコードされている
DERはバイナリ形式
PEMはBase64でテキストにエンコードされたファイル

