# server {
#     # default_serverを指定するとホスト名がどのserver_nameにもマッチしなかった場合に使われる
#     listen 80 default_server;

#     # IPによるアクセス制御
#     # deny 172.18.0.1;

#     # Basic認証
#     auth_basic "enter password";
#     auth_basic_user_file /etc/nginx/htpasswd;

#     # returnディレクティブを使うことでリダイレクトさせる
#     location /redirect {
#         # return 301 http://www.example.com;
#         return http://www.example.com;
#     }

#     location /not_found {
#         # 404を返すこともできる
#         return 404 'not found';
#     }

#     access_log /var/log/nginx/static-access.log;
#     error_log /var/log/nginx/static-error.log;

#     location / {
#         root /www/dir;
#         index index.html;
#     }
# }

server {
    listen 80;

    # hostsファイルいじる必要ある？
    # hostsの設定がないとexpress.backendでcurlした時に解決されない
    server_name express.backend;

    access_log /var/log/nginx/express-access.log;
    error_log /var/log/nginx/express-error.log;

    location / {
        proxy_pass http://api:8080; # (1) appはコンテナ名にする
        proxy_pass_request_headers on;
    }
}

server {
    listen 80;
    server_name express.backend2;

    access_log /var/log/nginx/express-access.log;
    error_log /var/log/nginx/express-error.log;

    location / {
        proxy_pass http://api2:8080; # (1) appはコンテナ名にする
        proxy_pass_request_headers on;
    }
}


# ロードバランスした
upstream apps-loadbalanced {
    server api-load-balance1:8081;
    server api-load-balance2:8082;
    server api-load-balance3:8083;
}

server {
    listen 80;
    location / {
        proxy_pass http://apps-loadbalanced;
    }
}
